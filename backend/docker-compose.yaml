# E:\ConnectYou\connective\backend\docker-compose.yaml
version: '3.8'

services:
  # -------------------- API Gateway Service --------------------
  api-gateway:
    build:
      # Context now points to a sibling folder within 'backend'
      # Assuming api-gateway will be created as E:\ConnectYou\connective\backend\api-gateway
      context: ./api-gateway 
    ports:
      - "80:80"
      - "443:443"
    environment:
      API_GATEWAY_PORT: 80
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      MONOLITH_BACKEND_PORT: ${MONOLITH_BACKEND_PORT}
      FRONTEND_URL: ${FRONTEND_URL}
      JWT_SECRET: ${JWT_SECRET}
      # Make sure these are in your E:\ConnectYou\connective\backend\.env
    depends_on:
      auth-service:
        condition: service_started
      monolith-backend:
        condition: service_started
      # frontend-web is not included here as it's outside this compose's context
    networks:
      - connective-backend-network # Renamed network for clarity

  # -------------------- Auth Service --------------------
  auth-service:
    build:
      # Context is now relative to backend/
      context: ./services/auth 
    ports:
      - "3001:3001"
    environment:
      AUTH_SERVICE_PORT: 3001
      AUTH_DB_URI: ${AUTH_DB_URI}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: development
      FRONTEND_URL: ${FRONTEND_URL}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - connective-backend-network

  # -------------------- Monolith Backend (The current 'backend' folder) --------------------
  monolith-backend:
    build:
      # Context is the current directory (where docker-compose.yaml resides)
      context: . 
      dockerfile: Dockerfile # Refers to E:\ConnectYou\connective\backend\Dockerfile
    ports:
      - "5000:5000"
    environment:
      MONGODB_URI: ${MONOLITH_DB_URI}
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: development
      ALLOWED_ORIGINS: ${FRONTEND_URL}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      # Make sure these are in your E:\ConnectYou\connective\backend\.env
    depends_on:
      monolith-db:
        condition: service_healthy
    networks:
      - connective-backend-network

  # -------------------- Database Services --------------------
  auth-db:
    image: mongo:latest
    volumes:
      - auth_db_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"] # <-- CORRECTED syntax
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connective-backend-network

  monolith-db:
    image: mongo:latest
    volumes:
      - monolith_db_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"] # <-- CORRECTED syntax
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connective-backend-network

volumes:
  auth_db_data:
  monolith_db_data:

networks:
  connective-backend-network: # Renamed network to reflect backend context
    driver: bridge