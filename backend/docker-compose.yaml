# E:\ConnectYou\connective\backend\docker-compose.yaml
version: '3.8'

services:
  # -------------------- API Gateway Service --------------------
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "80:80"
      - "443:443"
    environment:
      API_GATEWAY_PORT: 80
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      MONOLITH_BACKEND_PORT: ${MONOLITH_BACKEND_PORT}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      APPLICATION_SERVICE_PORT: ${APPLICATION_SERVICE_PORT} # Add this
      FRONTEND_URL: ${FRONTEND_URL}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      frontend-web:
        condition: service_started
      auth-service:
        condition: service_started
      profile-service:
        condition: service_started
      application-service: # Add this
        condition: service_started
      monolith-backend:
        condition: service_started
    networks:
      - connective-backend-network

  # -------------------- Frontend Service --------------------
  frontend-web:
    build:
      context: ../frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:80
    networks:
      - connective-backend-network

  # -------------------- Auth Service --------------------
  auth-service:
    build:
      context: ./services/auth
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    environment:
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      AUTH_DB_URI: ${AUTH_DB_URI}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
      FRONTEND_URL: ${FRONTEND_URL}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - connective-backend-network

  # -------------------- Profile Service --------------------
  profile-service:
    build:
      context: ./services/profile-service
    ports:
      - "${PROFILE_SERVICE_PORT}:${PROFILE_SERVICE_PORT}"
    environment:
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      PROFILE_DB_URI: ${PROFILE_DB_URI}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
      FRONTEND_URL: ${FRONTEND_URL}
    volumes:
      - profile_uploads:/app/uploads # Mount a volume for local uploads
    depends_on:
      profile-db:
        condition: service_healthy
    networks:
      - connective-backend-network

  # -------------------- Application Service --------------------
  application-service:
    build:
      context: ./services/application-service # Path to application-service directory
    ports:
      - "${APPLICATION_SERVICE_PORT}:${APPLICATION_SERVICE_PORT}"
    environment:
      APPLICATION_SERVICE_PORT: ${APPLICATION_SERVICE_PORT}
      APPLICATION_DB_URI: ${APPLICATION_DB_URI}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
      FRONTEND_URL: ${FRONTEND_URL}
      JOBS_SERVICE_URL: http://monolith-backend:${MONOLITH_BACKEND_PORT} # Point to monolith for now
      PROFILE_SERVICE_URL: http://profile-service:${PROFILE_SERVICE_PORT}
    volumes: # Add a volume for application service's local resume uploads
      - application_uploads:/app/uploads
    depends_on:
      application-db:
        condition: service_healthy
      profile-service: # Application Service needs Profile Service
        condition: service_started
      # No direct dependency on jobs-service here in depends_on, as we point to monolith for URL
    networks:
      - connective-backend-network

  # -------------------- Monolith Backend --------------------
  monolith-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${MONOLITH_BACKEND_PORT}:${MONOLITH_BACKEND_PORT}"
    environment:
      MONGODB_URI: ${MONOLITH_DB_URI}
      PORT: ${MONOLITH_BACKEND_PORT}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    depends_on:
      monolith-db:
        condition: service_healthy
    networks:
      - connective-backend-network

  # -------------------- Database Services --------------------
  auth-db:
    image: mongo:latest
    volumes:
      - auth_db_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connective-backend-network

  profile-db:
    image: mongo:latest
    volumes:
      - profile_db_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connective-backend-network

  application-db:
    image: mongo:latest
    volumes:
      - application_db_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connective-backend-network

  monolith-db:
    image: mongo:latest
    volumes:
      - monolith_db_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.runCommand(\"ping\").ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connective-backend-network

volumes:
  auth_db_data:
  profile_db_data:
  application_db_data: # New named volume for application service's local uploads
  monolith_db_data:
  profile_uploads: # Existing named volume for profile service's local uploads

networks:
  connective-backend-network:
    driver: bridge